1. Make sure everyone knows what Twitter is and what trending topics
are.

2. Run the script, passing the --search option and a search term and
observing the output. An on-topic example:

python twitter_api.py --search=python

Have the students try a few different search terms.

3. Run the script, passing the --trending-topics option and observing
the output:

python twitter_api.py --trending-topics

4. Look at the search code. Explain what an API is and how we are
using it in the search function.

5. Replace

    for tweet in tweets:
        print encode(tweet)

with

    for tweet in tweets:
        print type(tweet)
        print encode(tweet)

and discuss what each tweet contains. Undo the replacement when you
are done. Talk about what type() does. `tweet` is an instance of
twitter.Status:

6. Interactively work through the following exercise: change search to
print the Twitter username of the sender along with the tweet's text.
Use python's introspection to introduce interactively asking python
what it knows about unknown modules / classes.

Type the following code into an interactive prompt:

     >>> import twitter
     >>> api = twitter.Api()
     >>> tweets = api.GetSearch('#bospythonworkshop') # or your custom term
     >>> tweet = tweets[0]
     >>> help(tweet)

Talk about how powerful help() is!  You don't even have to look up the source
code or documentation; python can do it for you.

Explain the getter/setter convention if necessary.

Use the documentation to figure out the method for finding
the username of the person who posted the tweet. (Note:
it's totally unintuitive that you need to press 'q' to
get out of help()! Share this arcana.)

    >>> screenname = tweet.GetScreenName()

Modify the print statement in the code to print, with
appropriate formatting.

7. Walk through the code in trending_topics. Talk about what
GetTrendsCurrent returns.

8. Talk about commandline arguments and why they are useful. Note that
this may be a completely new idea for some Windows users. Talk about
conventions (-s searchterm v. --search=searchterm) and --help. Run the
script with the --help option.

Walk through the code in main, explaining how we get a user-supplied
search term from the commandline to the search function. Explain
__name__ == "__main__" and the difference between running code as a
script and using it as a module. Make it clear that they don't have to
understand all of this right now, and say that pattern matching is a
fine way to extend code and start understanding how it works.

9. EXERCISE: finish the stubbed user_tweets function. It takes a
Twitter username as an argument and should print out recent tweets for
that username using the GetUserTimeline function.

Then copy the --search parser logic in main to add a command line
option for user_tweets.
